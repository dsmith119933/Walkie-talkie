const startButton = document.getElementById('start-button');
const stopButton = document.getElementById('stop-button');
const remoteAudio = document.getElementById('remote-audio');
const connectionStatus = document.getElementById('connection-status');

let localStream;
let remoteStream;
let peerConnection;

const servers = {
    iceServers: [
        { urls: 'stun:stun.stunprotocol.org' },
        { urls: 'stun:stun.l.google.com:19302' }
    ]
};

startButton.addEventListener('click', async () => {
    startButton.disabled = true;
    stopButton.disabled = false;
    connectionStatus.textContent = 'Connecting...';

    // Get user media
    localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
    
    // Create peer connection
    peerConnection = new RTCPeerConnection(servers);
    peerConnection.onicecandidate = handleICECandidateEvent;
    peerConnection.ontrack = handleTrackEvent;
    
    // Add local stream to connection
    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
    
    // Create offer
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);
    
    // Send offer to remote peer (use signaling server in a real-world app)
    // Example: sendOfferToRemotePeer(offer);
});

stopButton.addEventListener('click', () => {
    stopButton.disabled = true;
    startButton.disabled = false;
    connectionStatus.textContent = 'Disconnected';

    // Close peer connection
    peerConnection.close();
    peerConnection = null;
});

function handleICECandidateEvent(event) {
    if (event.candidate) {
        // Send candidate to remote peer (use signaling server in a real-world app)
        // Example: sendCandidateToRemotePeer(event.candidate);
    }
}

function handleTrackEvent(event) {
    [remoteStream] = event.streams;
    remoteAudio.srcObject = remoteStream;
}

// Example functions for signaling (not implemented here)
// function sendOfferToRemotePeer(offer) {}
// function sendCandidateToRemotePeer(candidate) {}
